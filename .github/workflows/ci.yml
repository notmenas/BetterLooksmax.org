name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    name: Lint and Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint JavaScript files  
      run: |
        echo "üîç Checking JavaScript syntax..."
        for file in *.js; do
          if [ -f "$file" ]; then
            echo "Checking $file..."
            node -c "$file" && echo "‚úÖ $file syntax OK" || (echo "‚ùå $file has syntax errors" && exit 1)
          fi
        done
        echo "‚úÖ All JavaScript files passed syntax check"
        
    - name: Validate JSON files
      run: |
        echo "üîç Validating JSON files..."
        
        echo "Checking manifest.json..."
        python3 -m json.tool manifest.json > /dev/null && echo "‚úÖ manifest.json is valid" || (echo "‚ùå manifest.json is invalid" && exit 1)
        
        echo "Checking manifest-firefox.json..."
        python3 -m json.tool manifest-firefox.json > /dev/null && echo "‚úÖ manifest-firefox.json is valid" || (echo "‚ùå manifest-firefox.json is invalid" && exit 1)
        
        if [ -f "package.json" ]; then
          echo "Checking package.json..."
          python3 -m json.tool package.json > /dev/null && echo "‚úÖ package.json is valid" || (echo "‚ùå package.json is invalid" && exit 1)
        fi
        
    - name: Check browser API usage
      run: |
        echo "üîç Checking for proper browser API usage..."
        
        # Check that files use the browser wrapper instead of direct chrome calls
        DIRECT_CHROME_USAGE=$(grep -r "chrome\." *.js | grep -v "browser-api.js" | grep -v "chrome-mock.js" | grep -v "// Use the cross-browser API wrapper" || true)
        
        if [ -n "$DIRECT_CHROME_USAGE" ]; then
          echo "‚ö†Ô∏è  Found direct chrome API usage (should use browser wrapper):"
          echo "$DIRECT_CHROME_USAGE"
        else
          echo "‚úÖ All files use browser API wrapper correctly"
        fi
        
    - name: Run tests
      run: npm test
      continue-on-error: true
      
    - name: Check file sizes
      run: |
        echo "üìä File sizes:"
        find . -name "*.js" -not -path "./node_modules/*" -not -path "./tests/*" -exec ls -lh {} \;
        
        # Check for overly large files
        find . -name "*.js" -not -path "./node_modules/*" -size +500k -exec echo "‚ö†Ô∏è  Large file: {} " \;

  build-test:
    runs-on: ubuntu-latest  
    name: Build Test
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test build process
      run: |
        echo "üèóÔ∏è  Testing extension build process..."
        
        # Create build directories
        mkdir -p dist/chrome dist/firefox
        
        # Copy files function (only essential extension files)
        copy_files() {
          local dest="$1"
          
          # Copy essential JavaScript files (exclude test configs and dev files)
          essential_js_files=(
            "background.js"
            "browser-api.js" 
            "content.js"
            "sanitizer.js"
            "greyfilter.js"
            "nsfwfilter.js"
            "opfilter.js"
            "publicmode.js"
            "quickreply.js"
            "text-presets.js"
            "timer.js"
            "security-utils.js"
            "storage-validator.js"
            "performance-utils.js"
            "message-constants.js"
            "custom-upload.js"
            "button-styles.js"
            "privacy-dropdown.js"
            "debug-buttons.js"
          )
          
          for file in "${essential_js_files[@]}"; do
            if [ -f "$file" ]; then
              cp "$file" "$dest/"
            fi
          done
          
          # Copy directories
          cp -r popup "$dest/"
          cp -r libs "$dest/"
          
          # Copy icon if exists
          [ -f "icon.png" ] && cp icon.png "$dest/"
        }
        
        # Build both versions
        copy_files "dist/chrome"
        cp manifest.json dist/chrome/
        
        copy_files "dist/firefox"
        cp manifest-firefox.json dist/firefox/manifest.json
        
        echo "‚úÖ Build process completed successfully"
        
    - name: Verify build outputs
      run: |
        echo "üîç Verifying build outputs..."
        
        # Check that required files exist
        required_files=("browser-api.js" "content.js" "background.js" "sanitizer.js")
        
        for file in "${required_files[@]}"; do
          if [ -f "dist/chrome/$file" ] && [ -f "dist/firefox/$file" ]; then
            echo "‚úÖ $file present in both builds"
          else
            echo "‚ùå $file missing from builds"
            exit 1
          fi
        done
        
        # Check manifests are different
        if cmp -s "dist/chrome/manifest.json" "dist/firefox/manifest.json"; then
          echo "‚ùå Chrome and Firefox manifests are identical (should be different)"
          exit 1
        else
          echo "‚úÖ Chrome and Firefox manifests are properly differentiated"
        fi
        
        echo "‚úÖ All build verification checks passed"